[gd_scene load_steps=29 format=2]

[ext_resource path="res://particles/PNG (Transparent)/light_01.png" type="Texture" id=1]
[ext_resource path="res://particles/PNG (Black background)/magic_02.png" type="Texture" id=2]
[ext_resource path="res://scripts/particles/summon.gd" type="Script" id=3]
[ext_resource path="res://particles/floaty_64.png" type="Texture" id=4]
[ext_resource path="res://particles/PNG (Transparent)/circle_01.png" type="Texture" id=5]

[sub_resource type="SpatialMaterial" id=1]
flags_transparent = true
flags_unshaded = true
vertex_color_use_as_albedo = true
albedo_texture = ExtResource( 5 )

[sub_resource type="Gradient" id=2]
offsets = PoolRealArray( 0.707006, 1 )
colors = PoolColorArray( 0.700637, 0.700637, 0.700637, 1, 0.192157, 0.835294, 0.254902, 1 )

[sub_resource type="GradientTexture" id=3]
gradient = SubResource( 2 )

[sub_resource type="Curve" id=4]
_data = [ Vector2( 0.0263158, 0.0306818 ), 0.0, 0.0, 0, 0, Vector2( 0.993421, 1 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=5]
curve = SubResource( 4 )

[sub_resource type="ParticlesMaterial" id=6]
direction = Vector3( 0, 0, 0 )
gravity = Vector3( 0, 0, 0 )
scale = 1.5
scale_curve = SubResource( 5 )
color_ramp = SubResource( 3 )
anim_speed = 2.0

[sub_resource type="SpatialMaterial" id=7]
flags_transparent = true
flags_unshaded = true
vertex_color_use_as_albedo = true
params_blend_mode = 1
albedo_color = Color( 0.313726, 0.811765, 0.309804, 1 )
albedo_texture = ExtResource( 1 )

[sub_resource type="QuadMesh" id=8]
material = SubResource( 7 )

[sub_resource type="Shader" id=9]
code = "shader_type spatial;
render_mode blend_add,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 baseCol : hint_color;
uniform sampler2D tex : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

varying float b;
void vertex() {
	b = INSTANCE_CUSTOM.x;	
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
}

void fragment() 
{
	float hFrameNum = 7.0;
	float vFrameNum = 7.0;
	float diameter = 1.0 / hFrameNum;
	float radius = diameter / 2.0;
	
	// GRID	
	float xGrid = smoothstep(0.05, 0.1, fract(hFrameNum * UV.x));
	float yGrid = smoothstep(0.1, 0.15, fract(vFrameNum * UV.y));

	// CIRC
	float index = b;
	vec2 offset = vec2(radius + mod(index, hFrameNum) * diameter, radius + floor(index / (0.999 * vFrameNum)) * diameter);
	vec2 co = vec2(0.5) - offset;
	vec2 uvC = UV - co;
	//float circ = smoothstep(radius, radius + 0.01, length((UV - offset) - co));
	float circ = smoothstep(radius, radius + 0.01, length(uvC - offset));
	
	// COL
	// DEBUG GRID
	vec3 col = vec3(UV.x, UV.y, 0.) * xGrid * yGrid * circ;
	
	vec4 texSample = texture(tex, uvC);
	ALBEDO = texSample.xyz * (1. - circ);
	ALPHA = texture(tex, uvC).a;
}
"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/baseCol = null
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/tex = ExtResource( 4 )

[sub_resource type="Shader" id=11]
code = "shader_type particles;
uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float initial_linear_velocity;
uniform float initial_angle;
uniform float angular_velocity;
uniform float orbit_velocity;
uniform float linear_accel;
uniform float radial_accel;
uniform float tangent_accel;
uniform float damping;
uniform float scale;
uniform float hue_variation;
uniform float anim_speed;
uniform float anim_offset;
uniform float initial_linear_velocity_random;
uniform float initial_angle_random;
uniform float angular_velocity_random;
uniform float orbit_velocity_random;
uniform float linear_accel_random;
uniform float radial_accel_random;
uniform float tangent_accel_random;
uniform float damping_random;
uniform float scale_random;
uniform float hue_variation_random;
uniform float anim_speed_random;
uniform float anim_offset_random;
uniform float lifetime_randomness;
uniform float emission_sphere_radius;
uniform vec4 color_value : hint_color;
uniform int trail_divisor;
uniform vec3 gravity;
uniform sampler2D color_ramp;


float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

void vertex() 
{
	uint base_number = NUMBER / uint(trail_divisor);
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float angle_rand = rand_from_seed(alt_seed);
	float scale_rand = rand_from_seed(alt_seed);
	float hue_rot_rand = rand_from_seed(alt_seed);
	float anim_offset_rand = rand_from_seed(alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	bool restart = false;
	float tv = 0.0;
	if (CUSTOM.y > CUSTOM.w) {
		restart = true;
		tv = 1.0;
	}

	if (RESTART || restart) {
		float tex_linear_velocity = 0.0;
		float tex_angle = 0.0;
		float tex_anim_offset = 0.0;
		float spread_rad = spread * degree_to_rad;
		float angle1_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad;
		float angle2_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad * (1.0 - flatness);
		angle1_rad += direction.z != 0.0 ? atan(direction.x, direction.z) : sign(direction.x) * (pi / 2.0);
		angle2_rad += direction.z != 0.0 ? atan(direction.y, abs(direction.z)) : (direction.x != 0.0 ? atan(direction.y, abs(direction.x)) : sign(direction.y) * (pi / 2.0));
		vec3 direction_xz = vec3(sin(angle1_rad), 0.0, cos(angle1_rad));
		vec3 direction_yz = vec3(0.0, sin(angle2_rad), cos(angle2_rad));
		direction_yz.z = direction_yz.z / max(0.0001,sqrt(abs(direction_yz.z))); // better uniform distribution
		vec3 vec_direction = vec3(direction_xz.x * direction_yz.z, direction_yz.y, direction_xz.z * direction_yz.z);
		vec_direction = normalize(vec_direction);
		VELOCITY = vec_direction * initial_linear_velocity * mix(1.0, rand_from_seed(alt_seed), initial_linear_velocity_random);
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.y = 0.0;
		CUSTOM.w = (1.0 - lifetime_randomness * rand_from_seed(alt_seed));
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random);
		float s = rand_from_seed(alt_seed) * 2.0 - 1.0;
		float t = rand_from_seed(alt_seed) * 2.0 * pi;
		float radius = emission_sphere_radius * sqrt(1.0 - s * s);
		TRANSFORM[3].xyz = vec3(radius * cos(t), radius * sin(t), emission_sphere_radius * s);
		VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
		TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
	} else {
		CUSTOM.y += DELTA / LIFETIME;
		tv = CUSTOM.y / CUSTOM.w;
		float tex_linear_velocity = 0.0;
		float tex_angular_velocity = 0.0;
		float tex_linear_accel = 0.0;
		float tex_radial_accel = 0.0;
		float tex_tangent_accel = 0.0;
		float tex_damping = 0.0;
		float tex_angle = 0.0;
		float tex_anim_speed = 0.0;
		float tex_anim_offset = 0.0;
		vec3 force = gravity;
		vec3 pos = TRANSFORM[3].xyz;
		// apply linear acceleration
		force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * (linear_accel + tex_linear_accel) * mix(1.0, rand_from_seed(alt_seed), linear_accel_random) : vec3(0.0);
		// apply radial acceleration
		vec3 org = EMISSION_TRANSFORM[3].xyz;
		vec3 diff = pos - org;
		force += length(diff) > 0.0 ? normalize(diff) * (radial_accel + tex_radial_accel) * mix(1.0, rand_from_seed(alt_seed), radial_accel_random) : vec3(0.0);
		// apply tangential acceleration;
		vec3 crossDiff = cross(normalize(diff), normalize(gravity));
		force += length(crossDiff) > 0.0 ? normalize(crossDiff) * ((tangent_accel + tex_tangent_accel) * mix(1.0, rand_from_seed(alt_seed), tangent_accel_random)) : vec3(0.0);
		// apply attractor forces
		VELOCITY += force * DELTA;
		// orbit velocity
		if (damping + tex_damping > 0.0) {
			float v = length(VELOCITY);
			float damp = (damping + tex_damping) * mix(1.0, rand_from_seed(alt_seed), damping_random);
			v -= damp * DELTA;
			if (v < 0.0) {
				VELOCITY = vec3(0.0);
			} else {
				VELOCITY = normalize(VELOCITY) * v;
			}
		}
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		base_angle += CUSTOM.y * LIFETIME * (angular_velocity + tex_angular_velocity) * mix(1.0, rand_from_seed(alt_seed) * 2.0 - 1.0, angular_velocity_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random) + CUSTOM.y * (anim_speed + tex_anim_speed) * mix(1.0, rand_from_seed(alt_seed), anim_speed_random);
	}
	float tex_scale = 1.0;
	float tex_hue_variation = 0.0;
	float hue_rot_angle = (hue_variation + tex_hue_variation) * pi * 2.0 * mix(1.0, hue_rot_rand * 2.0 - 1.0, hue_variation_random);
	float hue_rot_c = cos(hue_rot_angle);
	float hue_rot_s = sin(hue_rot_angle);
	mat4 hue_rot_mat = mat4(vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.000, 0.000, 0.000, 1.0)) +
		mat4(vec4(0.701, -0.587, -0.114, 0.0),
			vec4(-0.299, 0.413, -0.114, 0.0),
			vec4(-0.300, -0.588, 0.886, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_c +
		mat4(vec4(0.168, 0.330, -0.497, 0.0),
			vec4(-0.328, 0.035,  0.292, 0.0),
			vec4(1.250, -1.050, -0.203, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_s;
	COLOR = hue_rot_mat * textureLod(color_ramp, vec2(tv, 0.0), 0.0);

	TRANSFORM[0].xyz = normalize(TRANSFORM[0].xyz);
	TRANSFORM[1].xyz = normalize(TRANSFORM[1].xyz);
	TRANSFORM[2].xyz = normalize(TRANSFORM[2].xyz);
	float base_scale = tex_scale * mix(scale, 1.0, scale_random * scale_rand);
	if (base_scale < 0.000001) {
		base_scale = 0.000001;
	}
	TRANSFORM[0].xyz *= base_scale;
	TRANSFORM[1].xyz *= base_scale;
	TRANSFORM[2].xyz *= base_scale;
	if (CUSTOM.y > CUSTOM.w) {		ACTIVE = false;
	}
	
	CUSTOM.x = float(INDEX);
}

"

[sub_resource type="Gradient" id=12]
offsets = PoolRealArray( 0, 0.493827, 1 )
colors = PoolColorArray( 0.972549, 0.952941, 0.952941, 1, 0.0784314, 0.913725, 0.12549, 1, 0.682353, 0.105882, 0.94902, 1 )

[sub_resource type="GradientTexture" id=13]
gradient = SubResource( 12 )

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 11 )
shader_param/direction = Vector3( 0, 1, 0 )
shader_param/spread = 20.0
shader_param/flatness = 0.0
shader_param/initial_linear_velocity = 0.0
shader_param/initial_angle = 0.0
shader_param/angular_velocity = 10.0
shader_param/orbit_velocity = 0.0
shader_param/linear_accel = 0.0
shader_param/radial_accel = 1.0
shader_param/tangent_accel = 0.0
shader_param/damping = 0.0
shader_param/scale = 1.0
shader_param/hue_variation = 20.0
shader_param/anim_speed = 0.0
shader_param/anim_offset = 0.0
shader_param/initial_linear_velocity_random = 0.0
shader_param/initial_angle_random = 0.0
shader_param/angular_velocity_random = 1.0
shader_param/orbit_velocity_random = 0.0
shader_param/linear_accel_random = 0.0
shader_param/radial_accel_random = 0.0
shader_param/tangent_accel_random = 0.0
shader_param/damping_random = 0.0
shader_param/scale_random = 1.0
shader_param/hue_variation_random = 0.0
shader_param/anim_speed_random = 0.0
shader_param/anim_offset_random = 0.0
shader_param/lifetime_randomness = 0.0
shader_param/emission_sphere_radius = 0.1
shader_param/color_value = Color( 1, 1, 1, 1 )
shader_param/trail_divisor = 50
shader_param/gravity = Vector3( 0, 1, 0 )
shader_param/color_ramp = SubResource( 13 )

[sub_resource type="Shader" id=15]
code = "shader_type spatial;
render_mode blend_add,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	ALPHA = albedo.a * albedo_tex.a;
}
"

[sub_resource type="ShaderMaterial" id=16]
shader = SubResource( 15 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )

[sub_resource type="QuadMesh" id=17]
material = SubResource( 16 )

[sub_resource type="SpatialMaterial" id=18]
flags_transparent = true
flags_unshaded = true
params_blend_mode = 1
albedo_color = Color( 0.145098, 0.223529, 0.866667, 1 )
albedo_texture = ExtResource( 2 )

[sub_resource type="Curve" id=19]
_data = [ Vector2( 0, 0.0295454 ), 0.0, 0.0, 0, 0, Vector2( 0.488889, 0.993182 ), 0.0, 0.0, 0, 0, Vector2( 1, 0.502273 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=20]
curve = SubResource( 19 )

[sub_resource type="ParticlesMaterial" id=21]
direction = Vector3( 0, 0, 0 )
spread = 0.0
flatness = 1.0
gravity = Vector3( 0, 0, 0 )
scale_curve = SubResource( 20 )

[sub_resource type="SpatialMaterial" id=22]

[sub_resource type="QuadMesh" id=23]
material = SubResource( 22 )

[node name="Summon" type="Spatial"]

[node name="SummonAura" type="Particles" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0 )
material_override = SubResource( 1 )
emitting = false
amount = 1
one_shot = true
visibility_aabb = AABB( -1, -1, -1, 2, 2, 2 )
process_material = SubResource( 6 )
draw_pass_1 = SubResource( 8 )

[node name="finalSummonSoul" type="Particles" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.0056584 )
material_override = SubResource( 10 )
emitting = false
amount = 49
one_shot = true
process_material = SubResource( 14 )
draw_pass_1 = SubResource( 17 )

[node name="SummonSpell" type="Particles" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0 )
material_override = SubResource( 18 )
emitting = false
amount = 1
one_shot = true
process_material = SubResource( 21 )
draw_pass_1 = SubResource( 23 )
script = ExtResource( 3 )
